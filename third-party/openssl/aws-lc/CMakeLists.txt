include(ExternalProject)

set(AWS_LC_BUILD_OPTS -DFIPS=${FIPS} -DBUILD_TESTING=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR} -G Ninja)

if(APPLE)
    if (IOS)
        set(AWS_LC_BUILD_OPTS ${AWS_LC_BUILD_OPTS} -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT} -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET} -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES})
    else ()
        set(AWS_LC_BUILD_OPTS ${AWS_LC_BUILD_OPTS} -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET})
    endif ()
elseif (ANDROID)
    set(AWS_LC_BUILD_OPTS ${AWS_LC_BUILD_OPTS} -DANDROID_ABI=${ANDROID_ABI} -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} -DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL})
endif ()

set(AWS_LC_VERSION "6fd77188780377bf556c0be0a584a8bd0b78d73f")
set(AWS_LC_HASH "9b0b6456fda6db9fcc7d08f48ed7338610a60f1dd7cffb3b3416feceacb94c88")

ExternalProject_add(
    openssl
    URL https://github.com/awslabs/aws-lc/archive/${AWS_LC_VERSION}.zip
    URL_HASH SHA256=${AWS_LC_HASH}
    CMAKE_ARGS ${AWS_LC_BUILD_OPTS}
    CMAKE_GENERATOR Ninja
)

set(OPENSSL_ROOT_DIR "${CMAKE_CURRENT_BINARY_DIR}" CACHE INTERNAL "")
set(OPENSSL_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/include" CACHE INTERNAL "")

if(APPLE)
    set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.dylib" CACHE INTERNAL "")
    set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.dylib" CACHE INTERNAL "")
    set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.dylib" CACHE INTERNAL "")
    set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.dylib" CACHE INTERNAL "")
elseif(WIN32)
    set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/openssl-prefix/src/openssl-build/crypto/crypto.lib" CACHE INTERNAL "")
    set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/openssl-prefix/src/openssl-build/ssl/ssl.lib" CACHE INTERNAL "")
    set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/openssl-prefix/src/openssl-build/crypto/crypto.dll" CACHE INTERNAL "")
    set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/openssl-prefix/src/openssl-build/ssl/ssl.dll" CACHE INTERNAL "")
elseif(ANDROID)
    set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.so" CACHE INTERNAL "")
    set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.so" CACHE INTERNAL "")
    set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.so" CACHE INTERNAL "")
    set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.so" CACHE INTERNAL "")
elseif(UNIX)
    set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.so" CACHE INTERNAL "")
    set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.so" CACHE INTERNAL "")
    set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.so" CACHE INTERNAL "")
    set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.so" CACHE INTERNAL "")
endif()
